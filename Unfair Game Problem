#include<map>
#include<ctime>
#include<cmath>
#include<queue>
#include<vector>
#include<cstdio>
#include<string>
#include<cstring>
#include<cassert>
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long LL;

int d[16];
LL dp[35][1 << 15];
const LL Inf = 30000000000LL;

inline void CheckMin(LL& a, LL b) {
    if(a > b) a = b;
};

int dd[16];
int main() {
    int T, n;
    cin >> T;
    while(T--) {
        cin >> n;
        for(int i = 0; i < n; i++)
            cin >> d[i];
        int tot = 1 << n;
        for(int i = 0; i <= 32; i++)
            for(int j = 0; j < tot; j++)
                dp[i][j] = Inf;
        dp[31][0] = 0;

        for(int i = 30; i >= 0; i--) {
            int one = 0;
            for(int j = 0; j < n; j++)
                if(d[j] & (1 << i)) one++;
            if(dp[i + 1][0] < Inf) {
                for(int j = 0; j < tot; j++) {
                    int ok = 1;
                    LL val = 0;
                    int ct = 0;
                    for(int k = 0; k < n; k++) {
                        if(!(j & (1 << k))) continue;
                        if(d[k] & (1 << i)) {
                            ok = 0;
                            break;
                        }
                        ct++;
                        val += (1 << i) - d[k] % (1 << i);
                    }
                    if(!ok || (one + ct) % 2 || val >= Inf) continue;
                    CheckMin(dp[i][j], dp[i + 1][0] + val);
                }
            }
            for(int j = 1; j < tot; j++) {
                if(dp[i + 1][j] >= Inf) continue;
                int ct = 0;
                for(int k = 0; k < n; k++) {
                    if(!(j & (1 << k)) && (d[k] & (1 << i))) ct++;
                }
                if(ct % 2) {
                    CheckMin(dp[i][j], dp[i + 1][j] + (1 << i));
                    for(int k = 0; k < n; k++) {
                        if(!(j & (1 << k)) && ((d[k] & (1 << i)) == 0)) {
                            int ns = j | (1 << k);
                            int cost = (1LL << i) - d[k] % (1 << i);
                            CheckMin(dp[i][ns], dp[i + 1][j] + cost);
                        }
                    }
                } else {
                    CheckMin(dp[i][j], dp[i + 1][j]);
                }
            }
        }

        LL ret = Inf;
        for(int i = 0; i < tot; i++) {
            if(ret > dp[0][i]) ret = dp[0][i];
        }
        cout << ret << endl;
    }
    system("pause");
    return 0;
}

